{- 10) O IMC – Indice de Massa Corporal é um critério da Organização Mundial de Saúde para dar uma indicação sobre a condição de peso de uma pessoa adulta. A fórmula é IMC = peso / (altura)2
 Elabore um algoritmo que leia o peso e a altura de um adulto e mostre sua condição de acordo com a tabela abaixo.
 Condições da IMC em adultos:
 Abaixo de 18,5 Abaixo do peso
 Entre 18,5 e 25 Peso normal
 Entre 25 e 30 Acima do peso
 Acima de 30 obeso -}

main :: IO ()
main = do
    putStrLn "Digite o peso (kg):"
    pesoStr <- getLine
    let peso = read pesoStr :: Float
    
    putStrLn "Digite a altura (m):"
    alturaStr <- getLine
    let altura = read alturaStr :: Float
    
    let imc = peso / (altura ^ 2)
    putStrLn $ "Seu IMC é: " ++ show imc
    putStrLn $ "Sua condição é: " ++ condicaoIMC imc

condicaoIMC :: Float -> String
condicaoIMC imc
    | imc < 18.5 = "Abaixo do peso"
    | imc >= 18.5 && imc < 25 = "Peso normal"
    | imc >= 25 && imc < 30 = "Acima do peso"
    | imc >= 30 = "Obeso"
    | otherwise = "Valor inválido"


{- 11) Elabore um algoritmo que calcule o que deve ser pago por um produto, considerando o preço normal de etiqueta e a escolha da condição de pagamento. Utilize os códigos da tabela a seguir para
 ler qual a condição de pagamento escolhida e efetuar o cálculo adequado.
 Código condição de pagamento
 1. À vista em dinheiro ou cheque, recebe 10% de desconto
 2. À vista no cartão de crédito, recebe 15% de desconto
 3. Em duas vezes, preço normal de etiqueta sem juros
 4. Em duas vezes, preço normal de etiqueta mais juros de 10% -}

main :: IO ()
main = do
    putStrLn "Digite o preço do produto:"
    precoStr <- getLine
    let preco = read precoStr :: Float
    
    putStrLn "Escolha a condição de pagamento:"
    putStrLn "1. À vista em dinheiro ou cheque, recebe 10% de desconto"
    putStrLn "2. À vista no cartão de crédito, recebe 15% de desconto"
    putStrLn "3. Em duas vezes, preço normal de etiqueta sem juros"
    putStrLn "4. Em duas vezes, preço normal de etiqueta mais juros de 10%"
    condicaoStr <- getLine
    let condicao = read condicaoStr :: Int
    
    let valorFinal = calcularValor preco condicao
    putStrLn $ "O valor a ser pago é: " ++ show valorFinal

calcularValor :: Float -> Int -> Float
calcularValor preco condicao
    | condicao == 1 = preco * 0.90
    | condicao == 2 = preco * 0.85
    | condicao == 3 = preco
    | condicao == 4 = preco * 1.10
    | otherwise = error "Condição de pagamento inválida"


{- 12) Escreva um algoritmo que leia o número de identificação, as 3 notas obtidas por um aluno nas 3 verificações e a média dos exercícios que fazem parte da avaliação, e calcule a média de
aproveitamento, usando a fórmula: MA := (nota1 + nota 2 * 2 + nota 3 * 3 + ME)/7. A atribuição dos conceitos obedece a tabela abaixo. O algoritmo deve escrever o número do aluno, suas notas, a
média dos exercícios, a média de aproveitamento, o conceito correspondente e a mensagem
'Aprovado' se o conceito for A, B ou C, e 'Reprovado' se o conceito for D ou E. Média de
aproveitamento e conceito:
>= 90 A
>= 75 < 90 B
>= 60 < 75 C
>= 40 < 60 D
 < 40 E
-}

main :: IO ()
main = do
    putStrLn "Digite o número de identificação do aluno:"
    idStr <- getLine
    let idAluno = read idStr :: Int
    
    putStrLn "Digite a primeira nota:"
    nota1Str <- getLine
    let nota1 = read nota1Str :: Float
    
    putStrLn "Digite a segunda nota:"
    nota2Str <- getLine
    let nota2 = read nota2Str :: Float
    
    putStrLn "Digite a terceira nota:"
    nota3Str <- getLine
    let nota3 = read nota3Str :: Float
    
    putStrLn "Digite a média dos exercícios:"
    meStr <- getLine
    let me = read meStr :: Float
    
    let ma = (nota1 + nota2 * 2 + nota3 * 3 + me) / 7
    let conceito = determinarConceito ma
    let situacao = if conceito `elem` ["A", "B", "C"] then "Aprovado" else "Reprovado"
    
    putStrLn $ "Número do aluno: " ++ show idAluno
    putStrLn $ "Notas: " ++ show nota1 ++ ", " ++ show nota2 ++ ", " ++ show nota3
    putStrLn $ "Média dos exercícios: " ++ show me
    putStrLn $ "Média de aproveitamento: " ++ show ma
    putStrLn $ "Conceito: " ++ conceito
    putStrLn $ "Situação: " ++ situacao

determinarConceito :: Float -> String
determinarConceito ma
    | ma >= 90 = "A"
    | ma >= 75 = "B"
    | ma >= 60 = "C"
    | ma >= 40 = "D"
    | ma < 40 = "E"
    | otherwise = "Valor inválido"
